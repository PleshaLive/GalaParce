// public/js/observer.js
const socket = io();
const spectatorVideoEl = document.getElementById('spectatorVideo');
const gsiSpectatingNicknameEl = document.getElementById('gsiSpectatingNickname');
const gsiSpectatingSteamIDEl = document.getElementById('gsiSpectatingSteamID');
const pinnedPlayerInfoEl = document.getElementById('pinnedPlayerInfo');
const pinnedNicknameEl = document.getElementById('pinnedNickname');
const unpinBtn = document.getElementById('unpinBtn');
const playerWebcamsContainer = document.getElementById('playerWebcamsContainer');
const fullscreenBtn = document.getElementById('fullscreenBtn');

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ activePlayers[nickname]:
// { webcamId, steamID, showWebcam, 
//   videoElement (–¥–ª—è –ø—Ä–µ–≤—å—é), peerConnection, stream (MediaStream) }
let activePlayers = {}; 
let currentGsiSpectatedWebcamId = null; 
let currentDisplayedWebcamIdInMainVideo = null;  // –ß–µ–π webcamId —Å–µ–π—á–∞—Å –≤ #spectatorVideo
let pinnedPlayerWebcamId = null;      

const observerSessionId = 'obs-' + Math.random().toString(36).substring(2, 9);

console.log('ObserverJS: Initialized. My session ID:', observerSessionId);
if (!spectatorVideoEl) console.error("ObserverJS: CRITICAL - Main video element 'spectatorVideo' not found!");

const pcConfig = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

// --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (fullscreen, pin/unpin) ---
// (–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ç–≤–µ—Ç–µ #43)
fullscreenBtn.onclick = () => { /* ... –∫–∞–∫ –≤ #43 ... */ if (!document.fullscreenElement) { spectatorVideoEl.requestFullscreen().catch(err => { console.error(`ObserverJS: Error fullscreen: ${err.message} (${err.name})`); }); } else { if (document.exitFullscreen) document.exitFullscreen(); } };
document.addEventListener('fullscreenchange', () => { /* ... –∫–∞–∫ –≤ #43 ... */ if (document.fullscreenElement === spectatorVideoEl) { fullscreenBtn.textContent = '–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ'; } else { fullscreenBtn.textContent = '–ù–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω'; if (pinnedPlayerWebcamId) unpinPlayer(); } });
function pinPlayer(webcamId, nickname) { /* ... –∫–∞–∫ –≤ #43 ... */ if (!activePlayers[nickname] || activePlayers[nickname].webcamId !== webcamId) {return;} pinnedPlayerWebcamId = webcamId; pinnedNicknameEl.textContent = nickname; pinnedPlayerInfoEl.style.display = 'block'; unpinBtn.style.display = 'inline-block'; console.log(`ObserverJS: Player ${nickname} PINNED.`); if (currentDisplayedWebcamIdInMainVideo !== webcamId && spectatorVideoEl) { if (activePlayers[nickname] && activePlayers[nickname].stream && activePlayers[nickname].showWebcam) { console.log(`ObserverJS: Pinning - switching main video to ${nickname}'s existing stream.`); spectatorVideoEl.srcObject = activePlayers[nickname].stream; currentDisplayedWebcamIdInMainVideo = webcamId; } else { console.log(`ObserverJS: Pinning - stream for ${nickname} not ready or not to be shown, (re)connecting.`); connectAndStorePlayerStream(activePlayers[nickname]); currentDisplayedWebcamIdInMainVideo = webcamId; /* connectAndStorePlayerStream –≤—ã–∑–æ–≤–µ—Ç setMainVideo */ } } }
function unpinPlayer() { /* ... –∫–∞–∫ –≤ #43 ... */ console.log(`ObserverJS: Player UNPINNED.`); pinnedPlayerWebcamId = null; pinnedPlayerInfoEl.style.display = 'none'; unpinBtn.style.display = 'none'; if (currentGsiSpectatedWebcamId && spectatorVideoEl) { const gsiTarget = Object.values(activePlayers).find(p => p.webcamId === currentGsiSpectatedWebcamId); if (gsiTarget) { console.log(`ObserverJS: Unpinned, switching to GSI target: ${gsiTarget.nickname}`); setMainVideo(gsiTarget); } } else if (spectatorVideoEl) { spectatorVideoEl.srcObject = null; currentDisplayedWebcamIdInMainVideo = null; } }
unpinBtn.onclick = unpinPlayer;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
function setMainVideo(playerObject) {
    if (!spectatorVideoEl) return;
    if (playerObject && playerObject.stream && playerObject.showWebcam) {
        console.log(`ObserverJS: Setting main video to ${playerObject.nickname}'s stream.`);
        spectatorVideoEl.srcObject = playerObject.stream;
        currentDisplayedWebcamIdInMainVideo = playerObject.webcamId;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–º –∏–≥—Ä–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω —ç—Ç–æ—Ç –∂–µ
        if (!pinnedPlayerWebcamId || pinnedPlayerWebcamId === playerObject.webcamId) {
             gsiSpectatingNicknameEl.textContent = playerObject.nickname;
             gsiSpectatingSteamIDEl.textContent = playerObject.steamID || 'N/A';
        }
    } else if (playerObject && !playerObject.showWebcam && playerObject.webcamId) {
        console.log(`ObserverJS: Main video target ${playerObject.nickname} has showWebcam=false. Clearing main video.`);
        spectatorVideoEl.srcObject = null; 
        currentDisplayedWebcamIdInMainVideo = playerObject.webcamId; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ü–µ–ª—å –±—ã–ª–∞, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        // –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä "–∫–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        if (!pinnedPlayerWebcamId || pinnedPlayerWebcamId === playerObject.webcamId) {
            gsiSpectatingNicknameEl.textContent = `${playerObject.nickname} (–∫–∞–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç–∞)`;
            gsiSpectatingSteamIDEl.textContent = playerObject.steamID || 'N/A';
        }
    } else {
        console.log("ObserverJS: No valid player object or stream to set for main video. Clearing.");
        spectatorVideoEl.srcObject = null;
        currentDisplayedWebcamIdInMainVideo = null;
         if (!pinnedPlayerWebcamId) { // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω
            gsiSpectatingNicknameEl.textContent = 'N/A';
            gsiSpectatingSteamIDEl.textContent = 'N/A';
        }
    }
}


// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –ø—Ä–µ–≤—å—é ---
function updatePlayerListAndWebcams() {
    Object.values(activePlayers).forEach(player => {
        if (!player.webcamId) return; 
        let itemId = `player-cam-item-${player.webcamId}`; let videoId = `video-${player.webcamId}`;
        let itemEl = document.getElementById(itemId);
        if (!itemEl) {
            itemEl = document.createElement('div'); itemEl.id = itemId; itemEl.className = 'player-camera-item';
            const h3 = document.createElement('h3'); h3.textContent = player.nickname; 
            if (player.isRegistered) h3.classList.add('registered-player-h3'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º isRegistered –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            itemEl.appendChild(h3);
            const videoEl = document.createElement('video'); videoEl.id = videoId; videoEl.autoplay = true; videoEl.playsInline = true; videoEl.muted = true; itemEl.appendChild(videoEl);
            player.videoElement = videoEl; // –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–≤—å—é
            const controls = document.createElement('div');
            const watchBtn = document.createElement('button'); watchBtn.textContent = `–°–º–æ—Ç—Ä–µ—Ç—å`;
            watchBtn.onclick = () => { unpinPlayer(); setMainVideo(player); };
            controls.appendChild(watchBtn);
            const pinFSBtn = document.createElement('button'); pinFSBtn.textContent = `üìå –ù–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω`;
            pinFSBtn.onclick = () => { pinPlayer(player.webcamId, player.nickname); if (spectatorVideoEl && !document.fullscreenElement) spectatorVideoEl.requestFullscreen().catch(e=>console.error(`FS error: ${e.message}`)); };
            controls.appendChild(pinFSBtn); itemEl.appendChild(controls); playerWebcamsContainer.appendChild(itemEl);
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è –ø—Ä–µ–≤—å—é
            connectAndStorePlayerStream(player); 
        } else { // –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const h3 = itemEl.querySelector('h3'); 
            if (h3 && h3.textContent !== player.nickname) h3.textContent = player.nickname;
            if (h3 && player.isRegistered) h3.classList.add('registered-player-h3'); else if (h3) h3.classList.remove('registered-player-h3');
            // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—å—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç, (–ø–µ—Ä–µ)–ø–æ–¥–∫–ª—é—á–∞–µ–º
            if (!player.peerConnection || ['closed', 'failed', 'disconnected'].includes(player.peerConnection.connectionState)) {
                console.log(`ObserverJS: Re-connecting preview for ${player.nickname} (state: ${player.peerConnection?.connectionState})`);
                connectAndStorePlayerStream(player);
            } else if (player.stream && player.videoElement.srcObject !== player.stream) { // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∏–º, –Ω–æ –æ–Ω –Ω–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
                 player.videoElement.srcObject = player.stream;
            }
        }
    });
    Array.from(playerWebcamsContainer.children).forEach(child => { const wId=child.id.replace('player-cam-item-',''); if(!Object.values(activePlayers).some(p=>p.webcamId===wId))child.remove();});
}

// --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ ---
async function connectAndStorePlayerStream(player) {
    if (!player || !player.webcamId || !player.videoElement) {
        console.warn("ObserverJS: connectAndStorePlayerStream - invalid player object or missing elements.");
        return;
    }
    // –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (!player.showWebcam) {
        console.log(`ObserverJS: [Preview ${player.nickname}] Webcam is set to NOT SHOW. Clearing video and closing PC if exists.`);
        if (player.peerConnection && player.peerConnection.connectionState !== 'closed') {
            player.peerConnection.close();
            player.peerConnection = null;
        }
        if (player.videoElement) player.videoElement.srcObject = null;
        player.stream = null;
        // –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é "–∫–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        return;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –Ω–µ 'connected'/'connecting' (–∏–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å)
    if (player.peerConnection && !['connected', 'connecting'].includes(player.peerConnection.connectionState) ) {
        console.log(`ObserverJS: [Preview ${player.nickname}] Closing existing non-active PC (state: ${player.peerConnection.connectionState}).`);
        player.peerConnection.close();
        player.peerConnection = null;
        player.stream = null;
        if(player.videoElement) player.videoElement.srcObject = null;
    }
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (player.peerConnection && ['connected', 'connecting'].includes(player.peerConnection.connectionState)) {
        // console.log(`ObserverJS: [Preview ${player.nickname}] Connection already active or connecting.`);
        if (player.stream && player.videoElement.srcObject !== player.stream) { // –ï—Å–ª–∏ —Å—Ç—Ä–∏–º –µ—Å—Ç—å, –Ω–æ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω
             player.videoElement.srcObject = player.stream;
        }
        return;
    }


    console.log(`ObserverJS: [Preview ${player.nickname}] Creating NEW PC.`);
    const pc = new RTCPeerConnection(pcConfig);
    player.peerConnection = pc; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    pc.playerName = player.nickname; // –î–ª—è –ª–æ–≥–æ–≤

    pc.onicecandidate = event => { if (event.candidate) { socket.emit('webrtc_ice_candidate', {candidate:event.candidate, targetId:player.webcamId, isTargetPlayer:true, senderId:observerSessionId}); }};
    
    pc.ontrack = event => {
        console.log(`ObserverJS: [Preview ${player.nickname}] Track RECEIVED:`, event.track); 
        if (event.streams && event.streams[0]) { 
            player.stream = event.streams[0]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫
            if (player.videoElement) { // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                 if (player.videoElement.srcObject !== player.stream) {
                    player.videoElement.srcObject = player.stream; 
                    player.videoElement.play().catch(e=>console.error(`ObserverJS: Error playing preview for ${player.nickname}:`,e));
                 }
            }
            // –ï—Å–ª–∏ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –µ–≥–æ
            if (currentDisplayedWebcamIdInMainVideo === player.webcamId && spectatorVideoEl && (!pinnedPlayerWebcamId || pinnedPlayerWebcamId === player.webcamId)) {
                if (spectatorVideoEl.srcObject !== player.stream) {
                    console.log(`ObserverJS: Updating main video with newly received stream for ${player.nickname}`);
                    spectatorVideoEl.srcObject = player.stream;
                }
            }
        } else { console.warn(`ObserverJS: [Preview ${player.nickname}] Track event no streams[0].`); player.stream = null; }
    };
    
    pc.onconnectionstatechange = () => { 
        const connState = pc.connectionState;
        console.log(`ObserverJS: [Preview ${player.nickname}] Connection state: ${connState}`); 
        if (['failed','disconnected','closed'].includes(connState)){
            if (player.peerConnection === pc) { // –ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ –µ—â–µ —Ç–µ–∫—É—â–∏–π PC –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                player.stream = null;
                if (player.videoElement) player.videoElement.srcObject = null;
                // –ï—Å–ª–∏ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –±—ã–ª –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–ø–∞–ª–æ
                if (currentDisplayedWebcamIdInMainVideo === player.webcamId && (!pinnedPlayerWebcamId || pinnedPlayerWebcamId === player.webcamId)) {
                    setMainVideo(null); // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ GSI –Ω–∞ –∫–æ–º-—Ç–æ –¥—Ä—É–≥–æ–º
                    gsiSpectatingNicknameEl.textContent = `${player.nickname} (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ)`;
                }
            }
        }
    };
    // pc.oniceconnectionstatechange –∏ pc.onsignalingstatechange –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    pc.oniceconnectionstatechange = () => { console.log(`ObserverJS: [Preview ${player.nickname}] ICE state: ${pc.iceConnectionState}`); };
    pc.onsignalingstatechange = () => { console.log(`ObserverJS: [Preview ${player.nickname}] Signaling state: ${pc.signalingState}`); };
    
    pc.addTransceiver('video', { direction: 'recvonly' }); pc.addTransceiver('audio', { direction: 'recvonly' });
    try {
        const offer = await pc.createOffer(); await pc.setLocalDescription(offer);
        socket.emit('webrtc_offer', { offer: offer, targetWebcamId: player.webcamId, senderWebcamId: observerSessionId });
    } catch (e) { console.error(`ObserverJS: [Preview ${player.nickname}] Error creating/sending offer:`, e); }
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Socket.IO ---
socket.on('current_players', (playersData) => { 
    console.log('ObserverJS: Received current_players:', playersData); 
    const newActivePlayers = {};
    playersData.forEach(p => {
        if (p.nickname) {
            newActivePlayers[p.nickname] = { 
                ...(activePlayers[p.nickname] || {}), // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ pc/stream/videoElement –µ—Å–ª–∏ –µ—Å—Ç—å
                ...p, 
                showWebcam: p.showWebcam === undefined ? true : p.showWebcam 
            };
        }
    }); 
    activePlayers = newActivePlayers;
    updatePlayerListAndWebcams(); 
});

socket.on('player_update', (playerData) => { 
    console.log('ObserverJS: Received player_update:', playerData); 
    if (playerData.nickname) {
        activePlayers[playerData.nickname] = { 
            ...(activePlayers[playerData.nickname] || {}), 
            ...playerData, 
            showWebcam: playerData.showWebcam === undefined ? true : playerData.showWebcam 
        };
        updatePlayerListAndWebcams(); // –û–±–Ω–æ–≤–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–µ–≤—å—é –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    }
    if (pinnedPlayerWebcamId && activePlayers[playerData.nickname] && activePlayers[playerData.nickname].webcamId === pinnedPlayerWebcamId) {
        pinnedNicknameEl.textContent = playerData.nickname;
    }
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª—Å—è –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ (–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –¥—Ä—É–≥–æ–π)
    if (currentDisplayedWebcamIdInMainVideo === playerData.webcamId && (!pinnedPlayerWebcamId || pinnedPlayerWebcamId === playerData.webcamId)) {
        if (activePlayers[playerData.nickname]) {
             setMainVideo(activePlayers[playerData.nickname]);
        }
    }
});

socket.on('player_left', ({ nickname, webcamId }) => { 
    console.log(`ObserverJS: Received player_left: ${nickname} (Webcam: ${webcamId})`); 
    const playerThatLeft = activePlayers[nickname];
    if (playerThatLeft) {
        if (playerThatLeft.peerConnection) { playerThatLeft.peerConnection.close(); }
        const item = document.getElementById(`player-cam-item-${webcamId}`); 
        if (item) item.remove(); 
        delete activePlayers[nickname];
    } 
    if (pinnedPlayerWebcamId === webcamId) { console.log(`ObserverJS: Pinned player ${nickname} left.`); unpinPlayer(); } 
    if (currentDisplayedWebcamIdInMainVideo === webcamId) { 
        console.log(`ObserverJS: Main displayed player ${nickname} left.`);
        setMainVideo(null); // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å GSI, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –Ω–∏–∫—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω
        if (!pinnedPlayerWebcamId && currentGsiSpectatedWebcamId) {
            const gsiTarget = Object.values(activePlayers).find(p => p.webcamId === currentGsiSpectatedWebcamId);
            if (gsiTarget) setMainVideo(gsiTarget);
        }
    }
    if (currentGsiSpectatedWebcamId === webcamId) { currentGsiSpectatedWebcamId = null; gsiSpectatingNicknameEl.textContent = 'N/A'; gsiSpectatingSteamIDEl.textContent = 'N/A'; }
});

socket.on('spectate_change', (data) => { 
    const { steamID, nickname, webcamId, showWebcam } = data; 
    console.log('ObserverJS: Received GSI spectate_change:', data); 
    gsiSpectatingNicknameEl.textContent = nickname || 'N/A'; 
    gsiSpectatingSteamIDEl.textContent = steamID || 'N/A'; 
    currentGsiSpectatedWebcamId = webcamId; 

    if (!spectatorVideoEl) { console.error("ObserverJS: Main video element missing for spectate_change."); return; } 
    if (pinnedPlayerWebcamId) { console.log(`ObserverJS: GSI to ${nickname}, but player ${pinnedNicknameEl.textContent} is pinned. Main video NOT switched.`); return; } 
    
    if (!webcamId) { // GSI –æ–±—Å–µ—Ä–≤–µ—Ä –Ω–∏–∫–æ–≥–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç –∏–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç webcamId
        console.log("ObserverJS: GSI spectate change to no specific player or player without webcam. Clearing main video."); 
        setMainVideo(null);
        return; 
    }
    
    const targetPlayer = Object.values(activePlayers).find(p => p.webcamId === webcamId);
    if (targetPlayer) {
        // –ü–µ—Ä–µ–¥–∞–µ–º showWebcam –æ—Ç GSI, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        const effectiveShowWebcam = showWebcam !== undefined ? showWebcam : targetPlayer.showWebcam;
        console.log(`ObserverJS: GSI change. Switching main video to ${targetPlayer.nickname} (ShowPref: ${effectiveShowWebcam})`);
        targetPlayer.showWebcam = effectiveShowWebcam; // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ GSI –ø—Ä–∏—Å–ª–∞–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ
        setMainVideo(targetPlayer);
    } else {
        console.warn(`ObserverJS: GSI spectate change to ${nickname}, but player not found in activePlayers. Clearing main video.`);
        setMainVideo(null);
         gsiSpectatingNicknameEl.textContent = `${nickname} (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã)`;
    }
});

socket.on('webrtc_answer_to_viewer', async ({ answer, playerWebcamId, viewerWebcamId }) => { /* ... –∫–∞–∫ –≤ #43 ... */ if (viewerWebcamId !== observerSessionId) return; let targetPC = null; const pEntry = Object.values(activePlayers).find(p=>p.webcamId===playerWebcamId); if (spectatorVideoEl.linkedPeerConnection && currentDisplayedWebcamIdInMainVideo===playerWebcamId && spectatorVideoEl.linkedPeerConnection.localDescription) targetPC = spectatorVideoEl.linkedPeerConnection; else if (pEntry && pEntry.peerConnection && pEntry.peerConnection.localDescription) targetPC = pEntry.peerConnection; if (targetPC) { if (targetPC.signalingState==='have-local-offer'||targetPC.signalingState==='stable') { try { await targetPC.setRemoteDescription(new RTCSessionDescription(answer)); } catch (e) { console.error(`ObserverJS: Error setting remote desc (answer) from ${playerWebcamId}:`,e);}} else { console.warn(`ObserverJS: Answer from ${playerWebcamId}, but PC signalingState is ${targetPC.signalingState}.`);}} else { console.warn(`ObserverJS: Answer from ${playerWebcamId}, but no matching PC or wrong state.`);} });
socket.on('webrtc_ice_candidate_to_client', async ({ candidate, forTargetId, iceSenderId }) => { /* ... –∫–∞–∫ –≤ #43 ... */ if (forTargetId !== observerSessionId) return; let targetPC = null; const pEntry = Object.values(activePlayers).find(p=>p.webcamId===iceSenderId); if (spectatorVideoEl.linkedPeerConnection && currentDisplayedWebcamIdInMainVideo === iceSenderId) targetPC = spectatorVideoEl.linkedPeerConnection; else if (pEntry && pEntry.peerConnection) targetPC = pEntry.peerConnection; if (targetPC && candidate) { try { await targetPC.addIceCandidate(new RTCIceCandidate(candidate)); } catch (e) { console.error(`ObserverJS: Error adding ICE from ${iceSenderId}:`,e);}} });
socket.on('player_preference_update', ({ nickname, webcamId, showWebcam }) => { /* ... –∫–∞–∫ –≤ #43 ... */ console.log('ObserverJS: Received player_preference_update:', { nickname, webcamId, showWebcam }); const playerToUpdate = Object.values(activePlayers).find(p => p.webcamId === webcamId); if (playerToUpdate) { playerToUpdate.showWebcam = showWebcam; if (currentDisplayedWebcamIdInMainVideo === webcamId && spectatorVideoEl) { setMainVideo(playerToUpdate); } if (playerToUpdate.videoElement) { if (showWebcam && (!playerToUpdate.peerConnection || playerToUpdate.peerConnection.connectionState === 'closed')) connectAndStorePlayerStream(playerToUpdate); else if (!showWebcam && playerToUpdate.peerConnection) { playerToUpdate.peerConnection.close(); playerToUpdate.peerConnection = null; playerToUpdate.stream = null; playerToUpdate.videoElement.srcObject = null; /* –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é */ } else if (showWebcam && playerToUpdate.stream && playerToUpdate.videoElement.srcObject !== playerToUpdate.stream) playerToUpdate.videoElement.srcObject = playerToUpdate.stream; } const checkbox = document.querySelector(`.show-webcam-toggle[data-webcamid="${webcamId}"]`); if (checkbox) checkbox.checked = showWebcam; }});
socket.on('webrtc_error', (data) => { /* ... –∫–∞–∫ –≤ #43 ... */ console.error('ObserverJS: Received webrtc_error from server:', data); if (data.targetWebcamId === currentDisplayedWebcamIdInMainVideo && spectatorVideoEl && (!pinnedPlayerWebcamId||pinnedPlayerWebcamId===data.targetWebcamId)) gsiSpectatingNicknameEl.textContent = `${gsiSpectatingNicknameEl.textContent} (–û—à–∏–±–∫–∞: ${data.message})`;});